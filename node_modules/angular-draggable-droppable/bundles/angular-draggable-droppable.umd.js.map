{
  "version": 3,
  "file": "angular-draggable-droppable.umd.js",
  "sources": [
    "ng://angular-draggable-droppable/src/drag-and-drop.module.ts",
    "ng://angular-draggable-droppable/src/droppable.directive.ts",
    "ng://angular-draggable-droppable/src/draggable.directive.ts",
    "ng://angular-draggable-droppable/src/draggable-helper.provider.ts"
  ],
  "sourcesContent": [
    "import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { DraggableDirective } from './draggable.directive';\nimport { DroppableDirective } from './droppable.directive';\nimport { DraggableHelper } from './draggable-helper.provider';\n\n@NgModule({\n  declarations: [DraggableDirective, DroppableDirective],\n  exports: [DraggableDirective, DroppableDirective]\n})\nexport class DragAndDropModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: DragAndDropModule,\n      providers: [DraggableHelper]\n    };\n  }\n}\n",
    "import {\n  Directive,\n  OnInit,\n  ElementRef,\n  OnDestroy,\n  Output,\n  EventEmitter,\n  NgZone\n} from '@angular/core';\nimport { Subject, Subscription } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  pairwise,\n  filter,\n  map,\n  mergeMap\n} from 'rxjs/operators';\nimport { DraggableHelper } from './draggable-helper.provider';\n\nfunction isCoordinateWithinRectangle(\n  clientX: number,\n  clientY: number,\n  rect: ClientRect\n): boolean {\n  return (\n    clientX >= rect.left &&\n    clientX <= rect.right &&\n    clientY >= rect.top &&\n    clientY <= rect.bottom\n  );\n}\n\nexport interface DropData {\n  dropData: any;\n}\n\n@Directive({\n  selector: '[mwlDroppable]'\n})\nexport class DroppableDirective implements OnInit, OnDestroy {\n  /**\n   * Called when a draggable element starts overlapping the element\n   */\n  @Output() dragEnter = new EventEmitter<DropData>();\n\n  /**\n   * Called when a draggable element stops overlapping the element\n   */\n  @Output() dragLeave = new EventEmitter<DropData>();\n\n  /**\n   * Called when a draggable element is moved over the element\n   */\n  @Output() dragOver = new EventEmitter<DropData>();\n\n  /**\n   * Called when a draggable element is dropped on this element\n   */\n  @Output() drop = new EventEmitter<DropData>();\n\n  currentDragSubscription: Subscription;\n\n  constructor(\n    private element: ElementRef,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone\n  ) {}\n\n  ngOnInit(): void {\n    interface CurrentDragData {\n      clientX: number;\n      clientY: number;\n      dropData: any;\n    }\n\n    this.currentDragSubscription = this.draggableHelper.currentDrag.subscribe(\n      (drag: Subject<CurrentDragData>) => {\n        const droppableRectangle: ClientRect = this.element.nativeElement.getBoundingClientRect();\n\n        let currentDragDropData: any;\n        const overlaps = drag.pipe(\n          map(({ clientX, clientY, dropData }) => {\n            currentDragDropData = dropData;\n            return isCoordinateWithinRectangle(\n              clientX,\n              clientY,\n              droppableRectangle\n            );\n          })\n        );\n\n        const overlapsChanged = overlaps.pipe(distinctUntilChanged());\n\n        let dragOverActive: boolean; // TODO - see if there's a way of doing this via rxjs\n\n        overlapsChanged\n          .pipe(filter(overlapsNow => overlapsNow))\n          .subscribe(() => {\n            dragOverActive = true;\n            this.zone.run(() => {\n              this.dragEnter.next({\n                dropData: currentDragDropData\n              });\n            });\n          });\n\n        overlaps.pipe(filter(overlapsNow => overlapsNow)).subscribe(() => {\n          this.zone.run(() => {\n            this.dragOver.next({\n              dropData: currentDragDropData\n            });\n          });\n        });\n\n        overlapsChanged\n          .pipe(pairwise())\n          .pipe(\n            filter(([didOverlap, overlapsNow]) => didOverlap && !overlapsNow)\n          )\n          .subscribe(() => {\n            dragOverActive = false;\n            this.zone.run(() => {\n              this.dragLeave.next({\n                dropData: currentDragDropData\n              });\n            });\n          });\n\n        drag.pipe(mergeMap(() => overlaps)).subscribe({\n          complete: () => {\n            if (dragOverActive) {\n              this.zone.run(() => {\n                this.drop.next({\n                  dropData: currentDragDropData\n                });\n              });\n            }\n          }\n        });\n      }\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.currentDragSubscription.unsubscribe();\n  }\n}\n",
    "import {\n  Directive,\n  OnInit,\n  ElementRef,\n  Renderer2,\n  Output,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnChanges,\n  NgZone,\n  SimpleChanges\n} from '@angular/core';\nimport { Subject, Observable, merge } from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  take,\n  takeLast,\n  pairwise,\n  share,\n  filter\n} from 'rxjs/operators';\nimport { DraggableHelper } from './draggable-helper.provider';\n\nexport interface Coordinates {\n  x: number;\n  y: number;\n}\n\nexport interface DragAxis {\n  x: boolean;\n  y: boolean;\n}\n\nexport interface SnapGrid {\n  x?: number;\n  y?: number;\n}\n\nexport type ValidateDrag = (coordinates: Coordinates) => boolean;\n\nexport interface PointerEvent {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\nconst MOVE_CURSOR: string = 'move';\n\n@Directive({\n  selector: '[mwlDraggable]'\n})\nexport class DraggableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * an object of data you can pass to the drop event\n   */\n  @Input() dropData: any;\n\n  /**\n   * The axis along which the element is draggable\n   */\n  @Input() dragAxis: DragAxis = { x: true, y: true };\n\n  /**\n   * Snap all drags to an x / y grid\n   */\n  @Input() dragSnapGrid: SnapGrid = {};\n\n  /**\n   * Show a ghost element that shows the drag when dragging\n   */\n  @Input() ghostDragEnabled: boolean = true;\n\n  /**\n   * Allow custom behaviour to control when the element is dragged\n   */\n  @Input() validateDrag: ValidateDrag;\n\n  /**\n   * The cursor to use when dragging the element\n   */\n  @Input() dragCursor = MOVE_CURSOR;\n\n  /**\n   * Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n   */\n  @Output() dragPointerDown = new EventEmitter<Coordinates>();\n\n  /**\n   * Called when the element has started to be dragged.\n   * Only called after at least one mouse or touch move event\n   */\n  @Output() dragStart = new EventEmitter<Coordinates>();\n\n  /**\n   * Called when the element is being dragged\n   */\n  @Output() dragging = new EventEmitter<Coordinates>();\n\n  /**\n   * Called after the element is dragged\n   */\n  @Output() dragEnd = new EventEmitter<Coordinates>();\n\n  /**\n   * @hidden\n   */\n  pointerDown: Subject<PointerEvent> = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerMove: Subject<PointerEvent> = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerUp: Subject<PointerEvent> = new Subject();\n\n  private eventListenerSubscriptions: {\n    mousemove?: () => void;\n    mousedown?: () => void;\n    mouseup?: () => void;\n    mouseenter?: () => void;\n    mouseleave?: () => void;\n    touchstart?: () => void;\n    touchmove?: () => void;\n    touchend?: () => void;\n    touchcancel?: () => void;\n  } = {};\n\n  /**\n   * @hidden\n   */\n  constructor(\n    public element: ElementRef,\n    private renderer: Renderer2,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone\n  ) {}\n\n  ngOnInit(): void {\n    this.checkEventListeners();\n\n    const pointerDrag: Observable<any> = this.pointerDown\n      .pipe(filter(() => this.canDrag()))\n      .pipe(\n        mergeMap((pointerDownEvent: PointerEvent) => {\n          const currentDrag: Subject<any> = new Subject();\n\n          this.zone.run(() => {\n            this.dragPointerDown.next({ x: 0, y: 0 });\n          });\n\n          const pointerMove: Observable<Coordinates> = this.pointerMove\n            .pipe(\n              map((pointerMoveEvent: PointerEvent) => {\n                pointerMoveEvent.event.preventDefault();\n\n                return {\n                  currentDrag,\n                  x: pointerMoveEvent.clientX - pointerDownEvent.clientX,\n                  y: pointerMoveEvent.clientY - pointerDownEvent.clientY,\n                  clientX: pointerMoveEvent.clientX,\n                  clientY: pointerMoveEvent.clientY\n                };\n              })\n            )\n            .pipe(\n              map((moveData: Coordinates) => {\n                if (this.dragSnapGrid.x) {\n                  moveData.x =\n                    Math.floor(moveData.x / this.dragSnapGrid.x) *\n                    this.dragSnapGrid.x;\n                }\n\n                if (this.dragSnapGrid.y) {\n                  moveData.y =\n                    Math.floor(moveData.y / this.dragSnapGrid.y) *\n                    this.dragSnapGrid.y;\n                }\n\n                return moveData;\n              })\n            )\n            .pipe(\n              map((moveData: Coordinates) => {\n                if (!this.dragAxis.x) {\n                  moveData.x = 0;\n                }\n\n                if (!this.dragAxis.y) {\n                  moveData.y = 0;\n                }\n\n                return moveData;\n              })\n            )\n            .pipe(\n              filter(\n                ({ x, y }) => !this.validateDrag || this.validateDrag({ x, y })\n              )\n            )\n            .pipe(takeUntil(merge(this.pointerUp, this.pointerDown)))\n            .pipe(share());\n\n          pointerMove.pipe(take(1)).subscribe(() => {\n            pointerDownEvent.event.preventDefault();\n\n            this.zone.run(() => {\n              this.dragStart.next({ x: 0, y: 0 });\n            });\n\n            this.setCursor(this.dragCursor);\n\n            this.draggableHelper.currentDrag.next(currentDrag);\n          });\n\n          pointerMove.pipe(takeLast(1)).subscribe(({ x, y }) => {\n            this.zone.run(() => {\n              this.dragEnd.next({ x, y });\n            });\n            currentDrag.complete();\n            this.setCssTransform(null);\n            if (this.ghostDragEnabled) {\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'pointerEvents',\n                null\n              );\n            }\n          });\n\n          return pointerMove;\n        })\n      )\n      .pipe(share());\n\n    merge(\n      pointerDrag.pipe(take(1)).pipe(map(value => [, value])),\n      pointerDrag.pipe(pairwise())\n    )\n      .pipe(\n        filter(([previous, next]) => {\n          if (!previous) {\n            return true;\n          }\n          return previous.x !== next.x || previous.y !== next.y;\n        })\n      )\n      .pipe(map(([previous, next]) => next))\n      .subscribe(({ x, y, currentDrag, clientX, clientY }) => {\n        this.zone.run(() => {\n          this.dragging.next({ x, y });\n        });\n        if (this.ghostDragEnabled) {\n          this.renderer.setStyle(\n            this.element.nativeElement,\n            'pointerEvents',\n            'none'\n          );\n        }\n        this.setCssTransform(`translate(${x}px, ${y}px)`);\n        currentDrag.next({\n          clientX,\n          clientY,\n          dropData: this.dropData\n        });\n      });\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes['dragAxis']) {\n      this.checkEventListeners();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n    this.pointerDown.complete();\n    this.pointerMove.complete();\n    this.pointerUp.complete();\n  }\n\n  private checkEventListeners(): void {\n    const canDrag: boolean = this.canDrag();\n    const hasEventListeners: boolean =\n      Object.keys(this.eventListenerSubscriptions).length > 0;\n\n    if (canDrag && !hasEventListeners) {\n      this.zone.runOutsideAngular(() => {\n        this.eventListenerSubscriptions.mousedown = this.renderer.listen(\n          this.element.nativeElement,\n          'mousedown',\n          (event: MouseEvent) => {\n            this.onMouseDown(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseup = this.renderer.listen(\n          'document',\n          'mouseup',\n          (event: MouseEvent) => {\n            this.onMouseUp(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchstart = this.renderer.listen(\n          this.element.nativeElement,\n          'touchstart',\n          (event: TouchEvent) => {\n            this.onTouchStart(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchend = this.renderer.listen(\n          'document',\n          'touchend',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchcancel = this.renderer.listen(\n          'document',\n          'touchcancel',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseenter = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseenter',\n          () => {\n            this.onMouseEnter();\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseleave = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseleave',\n          () => {\n            this.onMouseLeave();\n          }\n        );\n      });\n    } else if (!canDrag && hasEventListeners) {\n      this.unsubscribeEventListeners();\n    }\n  }\n\n  private onMouseDown(event: MouseEvent): void {\n    if (!this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove = this.renderer.listen(\n        'document',\n        'mousemove',\n        (mouseMoveEvent: MouseEvent) => {\n          this.pointerMove.next({\n            event: mouseMoveEvent,\n            clientX: mouseMoveEvent.clientX,\n            clientY: mouseMoveEvent.clientY\n          });\n        }\n      );\n    }\n    this.pointerDown.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onMouseUp(event: MouseEvent): void {\n    if (this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove();\n      delete this.eventListenerSubscriptions.mousemove;\n    }\n    this.pointerUp.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onTouchStart(event: TouchEvent): void {\n    if (!this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove = this.renderer.listen(\n        'document',\n        'touchmove',\n        (touchMoveEvent: TouchEvent) => {\n          this.pointerMove.next({\n            event: touchMoveEvent,\n            clientX: touchMoveEvent.targetTouches[0].clientX,\n            clientY: touchMoveEvent.targetTouches[0].clientY\n          });\n        }\n      );\n    }\n    this.pointerDown.next({\n      event,\n      clientX: event.touches[0].clientX,\n      clientY: event.touches[0].clientY\n    });\n  }\n\n  private onTouchEnd(event: TouchEvent): void {\n    if (this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove();\n      delete this.eventListenerSubscriptions.touchmove;\n    }\n    this.pointerUp.next({\n      event,\n      clientX: event.changedTouches[0].clientX,\n      clientY: event.changedTouches[0].clientY\n    });\n  }\n\n  private onMouseEnter(): void {\n    this.setCursor(this.dragCursor);\n  }\n\n  private onMouseLeave(): void {\n    this.setCursor(null);\n  }\n\n  private setCssTransform(value: string | null): void {\n    if (this.ghostDragEnabled) {\n      const transformAttributes = [\n        'transform',\n        '-webkit-transform',\n        '-ms-transform',\n        '-moz-transform',\n        '-o-transform'\n      ];\n      transformAttributes.forEach(transformAttribute => {\n        this.renderer.setStyle(\n          this.element.nativeElement,\n          transformAttribute,\n          value\n        );\n      });\n    }\n  }\n\n  private canDrag(): boolean {\n    return this.dragAxis.x || this.dragAxis.y;\n  }\n\n  private setCursor(value: string | null): void {\n    this.renderer.setStyle(this.element.nativeElement, 'cursor', value);\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListenerSubscriptions).forEach(type => {\n      (this as any).eventListenerSubscriptions[type]();\n      delete (this as any).eventListenerSubscriptions[type];\n    });\n  }\n}\n",
    "import { Subject } from 'rxjs';\n\nexport class DraggableHelper {\n  currentDrag: Subject<any> = new Subject();\n}\n"
  ],
  "names": [
    "ElementRef",
    "Directive",
    "mergeMap",
    "tslib_1.__read",
    "filter",
    "pairwise",
    "distinctUntilChanged",
    "map",
    "EventEmitter",
    "merge",
    "take",
    "share",
    "takeLast",
    "takeUntil",
    "Subject"
  ],
  "mappings": "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"
}
