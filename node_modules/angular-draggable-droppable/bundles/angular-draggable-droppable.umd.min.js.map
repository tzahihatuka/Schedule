{
  "version": 3,
  "file": "angular-draggable-droppable.umd.min.js",
  "sources": [
    "ng://angular-draggable-droppable/src/draggable-helper.provider.ts",
    "ng://angular-draggable-droppable/src/draggable.directive.ts",
    "ng://angular-draggable-droppable/src/droppable.directive.ts",
    "ng://angular-draggable-droppable/src/drag-and-drop.module.ts"
  ],
  "sourcesContent": [
    "import { Subject } from 'rxjs';\n\nexport class DraggableHelper {\n  currentDrag: Subject<any> = new Subject();\n}\n",
    "import {\n  Directive,\n  OnInit,\n  ElementRef,\n  Renderer2,\n  Output,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnChanges,\n  NgZone,\n  SimpleChanges\n} from '@angular/core';\nimport { Subject, Observable, merge } from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  take,\n  takeLast,\n  pairwise,\n  share,\n  filter\n} from 'rxjs/operators';\nimport { DraggableHelper } from './draggable-helper.provider';\n\nexport interface Coordinates {\n  x: number;\n  y: number;\n}\n\nexport interface DragAxis {\n  x: boolean;\n  y: boolean;\n}\n\nexport interface SnapGrid {\n  x?: number;\n  y?: number;\n}\n\nexport type ValidateDrag = (coordinates: Coordinates) => boolean;\n\nexport interface PointerEvent {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\nconst MOVE_CURSOR: string = 'move';\n\n@Directive({\n  selector: '[mwlDraggable]'\n})\nexport class DraggableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * an object of data you can pass to the drop event\n   */\n  @Input() dropData: any;\n\n  /**\n   * The axis along which the element is draggable\n   */\n  @Input() dragAxis: DragAxis = { x: true, y: true };\n\n  /**\n   * Snap all drags to an x / y grid\n   */\n  @Input() dragSnapGrid: SnapGrid = {};\n\n  /**\n   * Show a ghost element that shows the drag when dragging\n   */\n  @Input() ghostDragEnabled: boolean = true;\n\n  /**\n   * Allow custom behaviour to control when the element is dragged\n   */\n  @Input() validateDrag: ValidateDrag;\n\n  /**\n   * The cursor to use when dragging the element\n   */\n  @Input() dragCursor = MOVE_CURSOR;\n\n  /**\n   * Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n   */\n  @Output() dragPointerDown = new EventEmitter<Coordinates>();\n\n  /**\n   * Called when the element has started to be dragged.\n   * Only called after at least one mouse or touch move event\n   */\n  @Output() dragStart = new EventEmitter<Coordinates>();\n\n  /**\n   * Called when the element is being dragged\n   */\n  @Output() dragging = new EventEmitter<Coordinates>();\n\n  /**\n   * Called after the element is dragged\n   */\n  @Output() dragEnd = new EventEmitter<Coordinates>();\n\n  /**\n   * @hidden\n   */\n  pointerDown: Subject<PointerEvent> = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerMove: Subject<PointerEvent> = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerUp: Subject<PointerEvent> = new Subject();\n\n  private eventListenerSubscriptions: {\n    mousemove?: () => void;\n    mousedown?: () => void;\n    mouseup?: () => void;\n    mouseenter?: () => void;\n    mouseleave?: () => void;\n    touchstart?: () => void;\n    touchmove?: () => void;\n    touchend?: () => void;\n    touchcancel?: () => void;\n  } = {};\n\n  /**\n   * @hidden\n   */\n  constructor(\n    public element: ElementRef,\n    private renderer: Renderer2,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone\n  ) {}\n\n  ngOnInit(): void {\n    this.checkEventListeners();\n\n    const pointerDrag: Observable<any> = this.pointerDown\n      .pipe(filter(() => this.canDrag()))\n      .pipe(\n        mergeMap((pointerDownEvent: PointerEvent) => {\n          const currentDrag: Subject<any> = new Subject();\n\n          this.zone.run(() => {\n            this.dragPointerDown.next({ x: 0, y: 0 });\n          });\n\n          const pointerMove: Observable<Coordinates> = this.pointerMove\n            .pipe(\n              map((pointerMoveEvent: PointerEvent) => {\n                pointerMoveEvent.event.preventDefault();\n\n                return {\n                  currentDrag,\n                  x: pointerMoveEvent.clientX - pointerDownEvent.clientX,\n                  y: pointerMoveEvent.clientY - pointerDownEvent.clientY,\n                  clientX: pointerMoveEvent.clientX,\n                  clientY: pointerMoveEvent.clientY\n                };\n              })\n            )\n            .pipe(\n              map((moveData: Coordinates) => {\n                if (this.dragSnapGrid.x) {\n                  moveData.x =\n                    Math.floor(moveData.x / this.dragSnapGrid.x) *\n                    this.dragSnapGrid.x;\n                }\n\n                if (this.dragSnapGrid.y) {\n                  moveData.y =\n                    Math.floor(moveData.y / this.dragSnapGrid.y) *\n                    this.dragSnapGrid.y;\n                }\n\n                return moveData;\n              })\n            )\n            .pipe(\n              map((moveData: Coordinates) => {\n                if (!this.dragAxis.x) {\n                  moveData.x = 0;\n                }\n\n                if (!this.dragAxis.y) {\n                  moveData.y = 0;\n                }\n\n                return moveData;\n              })\n            )\n            .pipe(\n              filter(\n                ({ x, y }) => !this.validateDrag || this.validateDrag({ x, y })\n              )\n            )\n            .pipe(takeUntil(merge(this.pointerUp, this.pointerDown)))\n            .pipe(share());\n\n          pointerMove.pipe(take(1)).subscribe(() => {\n            pointerDownEvent.event.preventDefault();\n\n            this.zone.run(() => {\n              this.dragStart.next({ x: 0, y: 0 });\n            });\n\n            this.setCursor(this.dragCursor);\n\n            this.draggableHelper.currentDrag.next(currentDrag);\n          });\n\n          pointerMove.pipe(takeLast(1)).subscribe(({ x, y }) => {\n            this.zone.run(() => {\n              this.dragEnd.next({ x, y });\n            });\n            currentDrag.complete();\n            this.setCssTransform(null);\n            if (this.ghostDragEnabled) {\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'pointerEvents',\n                null\n              );\n            }\n          });\n\n          return pointerMove;\n        })\n      )\n      .pipe(share());\n\n    merge(\n      pointerDrag.pipe(take(1)).pipe(map(value => [, value])),\n      pointerDrag.pipe(pairwise())\n    )\n      .pipe(\n        filter(([previous, next]) => {\n          if (!previous) {\n            return true;\n          }\n          return previous.x !== next.x || previous.y !== next.y;\n        })\n      )\n      .pipe(map(([previous, next]) => next))\n      .subscribe(({ x, y, currentDrag, clientX, clientY }) => {\n        this.zone.run(() => {\n          this.dragging.next({ x, y });\n        });\n        if (this.ghostDragEnabled) {\n          this.renderer.setStyle(\n            this.element.nativeElement,\n            'pointerEvents',\n            'none'\n          );\n        }\n        this.setCssTransform(`translate(${x}px, ${y}px)`);\n        currentDrag.next({\n          clientX,\n          clientY,\n          dropData: this.dropData\n        });\n      });\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes['dragAxis']) {\n      this.checkEventListeners();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n    this.pointerDown.complete();\n    this.pointerMove.complete();\n    this.pointerUp.complete();\n  }\n\n  private checkEventListeners(): void {\n    const canDrag: boolean = this.canDrag();\n    const hasEventListeners: boolean =\n      Object.keys(this.eventListenerSubscriptions).length > 0;\n\n    if (canDrag && !hasEventListeners) {\n      this.zone.runOutsideAngular(() => {\n        this.eventListenerSubscriptions.mousedown = this.renderer.listen(\n          this.element.nativeElement,\n          'mousedown',\n          (event: MouseEvent) => {\n            this.onMouseDown(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseup = this.renderer.listen(\n          'document',\n          'mouseup',\n          (event: MouseEvent) => {\n            this.onMouseUp(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchstart = this.renderer.listen(\n          this.element.nativeElement,\n          'touchstart',\n          (event: TouchEvent) => {\n            this.onTouchStart(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchend = this.renderer.listen(\n          'document',\n          'touchend',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchcancel = this.renderer.listen(\n          'document',\n          'touchcancel',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseenter = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseenter',\n          () => {\n            this.onMouseEnter();\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseleave = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseleave',\n          () => {\n            this.onMouseLeave();\n          }\n        );\n      });\n    } else if (!canDrag && hasEventListeners) {\n      this.unsubscribeEventListeners();\n    }\n  }\n\n  private onMouseDown(event: MouseEvent): void {\n    if (!this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove = this.renderer.listen(\n        'document',\n        'mousemove',\n        (mouseMoveEvent: MouseEvent) => {\n          this.pointerMove.next({\n            event: mouseMoveEvent,\n            clientX: mouseMoveEvent.clientX,\n            clientY: mouseMoveEvent.clientY\n          });\n        }\n      );\n    }\n    this.pointerDown.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onMouseUp(event: MouseEvent): void {\n    if (this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove();\n      delete this.eventListenerSubscriptions.mousemove;\n    }\n    this.pointerUp.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onTouchStart(event: TouchEvent): void {\n    if (!this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove = this.renderer.listen(\n        'document',\n        'touchmove',\n        (touchMoveEvent: TouchEvent) => {\n          this.pointerMove.next({\n            event: touchMoveEvent,\n            clientX: touchMoveEvent.targetTouches[0].clientX,\n            clientY: touchMoveEvent.targetTouches[0].clientY\n          });\n        }\n      );\n    }\n    this.pointerDown.next({\n      event,\n      clientX: event.touches[0].clientX,\n      clientY: event.touches[0].clientY\n    });\n  }\n\n  private onTouchEnd(event: TouchEvent): void {\n    if (this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove();\n      delete this.eventListenerSubscriptions.touchmove;\n    }\n    this.pointerUp.next({\n      event,\n      clientX: event.changedTouches[0].clientX,\n      clientY: event.changedTouches[0].clientY\n    });\n  }\n\n  private onMouseEnter(): void {\n    this.setCursor(this.dragCursor);\n  }\n\n  private onMouseLeave(): void {\n    this.setCursor(null);\n  }\n\n  private setCssTransform(value: string | null): void {\n    if (this.ghostDragEnabled) {\n      const transformAttributes = [\n        'transform',\n        '-webkit-transform',\n        '-ms-transform',\n        '-moz-transform',\n        '-o-transform'\n      ];\n      transformAttributes.forEach(transformAttribute => {\n        this.renderer.setStyle(\n          this.element.nativeElement,\n          transformAttribute,\n          value\n        );\n      });\n    }\n  }\n\n  private canDrag(): boolean {\n    return this.dragAxis.x || this.dragAxis.y;\n  }\n\n  private setCursor(value: string | null): void {\n    this.renderer.setStyle(this.element.nativeElement, 'cursor', value);\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListenerSubscriptions).forEach(type => {\n      (this as any).eventListenerSubscriptions[type]();\n      delete (this as any).eventListenerSubscriptions[type];\n    });\n  }\n}\n",
    "import {\n  Directive,\n  OnInit,\n  ElementRef,\n  OnDestroy,\n  Output,\n  EventEmitter,\n  NgZone\n} from '@angular/core';\nimport { Subject, Subscription } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  pairwise,\n  filter,\n  map,\n  mergeMap\n} from 'rxjs/operators';\nimport { DraggableHelper } from './draggable-helper.provider';\n\nfunction isCoordinateWithinRectangle(\n  clientX: number,\n  clientY: number,\n  rect: ClientRect\n): boolean {\n  return (\n    clientX >= rect.left &&\n    clientX <= rect.right &&\n    clientY >= rect.top &&\n    clientY <= rect.bottom\n  );\n}\n\nexport interface DropData {\n  dropData: any;\n}\n\n@Directive({\n  selector: '[mwlDroppable]'\n})\nexport class DroppableDirective implements OnInit, OnDestroy {\n  /**\n   * Called when a draggable element starts overlapping the element\n   */\n  @Output() dragEnter = new EventEmitter<DropData>();\n\n  /**\n   * Called when a draggable element stops overlapping the element\n   */\n  @Output() dragLeave = new EventEmitter<DropData>();\n\n  /**\n   * Called when a draggable element is moved over the element\n   */\n  @Output() dragOver = new EventEmitter<DropData>();\n\n  /**\n   * Called when a draggable element is dropped on this element\n   */\n  @Output() drop = new EventEmitter<DropData>();\n\n  currentDragSubscription: Subscription;\n\n  constructor(\n    private element: ElementRef,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone\n  ) {}\n\n  ngOnInit(): void {\n    interface CurrentDragData {\n      clientX: number;\n      clientY: number;\n      dropData: any;\n    }\n\n    this.currentDragSubscription = this.draggableHelper.currentDrag.subscribe(\n      (drag: Subject<CurrentDragData>) => {\n        const droppableRectangle: ClientRect = this.element.nativeElement.getBoundingClientRect();\n\n        let currentDragDropData: any;\n        const overlaps = drag.pipe(\n          map(({ clientX, clientY, dropData }) => {\n            currentDragDropData = dropData;\n            return isCoordinateWithinRectangle(\n              clientX,\n              clientY,\n              droppableRectangle\n            );\n          })\n        );\n\n        const overlapsChanged = overlaps.pipe(distinctUntilChanged());\n\n        let dragOverActive: boolean; // TODO - see if there's a way of doing this via rxjs\n\n        overlapsChanged\n          .pipe(filter(overlapsNow => overlapsNow))\n          .subscribe(() => {\n            dragOverActive = true;\n            this.zone.run(() => {\n              this.dragEnter.next({\n                dropData: currentDragDropData\n              });\n            });\n          });\n\n        overlaps.pipe(filter(overlapsNow => overlapsNow)).subscribe(() => {\n          this.zone.run(() => {\n            this.dragOver.next({\n              dropData: currentDragDropData\n            });\n          });\n        });\n\n        overlapsChanged\n          .pipe(pairwise())\n          .pipe(\n            filter(([didOverlap, overlapsNow]) => didOverlap && !overlapsNow)\n          )\n          .subscribe(() => {\n            dragOverActive = false;\n            this.zone.run(() => {\n              this.dragLeave.next({\n                dropData: currentDragDropData\n              });\n            });\n          });\n\n        drag.pipe(mergeMap(() => overlaps)).subscribe({\n          complete: () => {\n            if (dragOverActive) {\n              this.zone.run(() => {\n                this.drop.next({\n                  dropData: currentDragDropData\n                });\n              });\n            }\n          }\n        });\n      }\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.currentDragSubscription.unsubscribe();\n  }\n}\n",
    "import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { DraggableDirective } from './draggable.directive';\nimport { DroppableDirective } from './droppable.directive';\nimport { DraggableHelper } from './draggable-helper.provider';\n\n@NgModule({\n  declarations: [DraggableDirective, DroppableDirective],\n  exports: [DraggableDirective, DroppableDirective]\n})\nexport class DragAndDropModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: DragAndDropModule,\n      providers: [DraggableHelper]\n    };\n  }\n}\n"
  ],
  "names": [
    "DraggableHelper",
    "this",
    "currentDrag",
    "Subject",
    "DraggableDirective",
    "element",
    "renderer",
    "draggableHelper",
    "zone",
    "pointerUp",
    "eventListenerSubscriptions",
    "prototype",
    "ngOnInit",
    "_this",
    "checkEventListeners",
    "pointerDrag",
    "pointerDown",
    "pipe",
    "filter",
    "canDrag",
    "mergeMap",
    "pointerDownEvent",
    "run",
    "dragPointerDown",
    "next",
    "x",
    "y",
    "pointerMove",
    "map",
    "pointerMoveEvent",
    "event",
    "preventDefault",
    "clientX",
    "clientY",
    "moveData",
    "dragSnapGrid",
    "Math",
    "floor",
    "dragAxis",
    "_a",
    "validateDrag",
    "takeUntil",
    "merge",
    "share",
    "take",
    "subscribe",
    "dragStart",
    "setCursor",
    "dragCursor",
    "takeLast",
    "dragEnd",
    "complete",
    "setCssTransform",
    "ghostDragEnabled",
    "setStyle",
    "nativeElement",
    "value",
    "pairwise",
    "_b",
    "tslib_1.__read",
    "previous",
    "dragging",
    "dropData",
    "ngOnChanges",
    "changes",
    "ngOnDestroy",
    "unsubscribeEventListeners",
    "hasEventListeners",
    "Object",
    "keys",
    "length",
    "runOutsideAngular",
    "mousedown",
    "listen",
    "onMouseDown",
    "mouseup",
    "onMouseUp",
    "touchstart",
    "onTouchStart",
    "touchend",
    "onTouchEnd",
    "touchcancel",
    "onMouseLeave",
    "mousemove",
    "touchMoveEvent",
    "targetTouches",
    "touches",
    "touchmove",
    "changedTouches",
    "onMouseEnter",
    "forEach",
    "transformAttribute",
    "type",
    "decorators",
    "Directive",
    "args",
    "selector",
    "DroppableDirective",
    "drop",
    "EventEmitter",
    "currentDragSubscription",
    "drag",
    "currentDragDropData",
    "dragOverActive",
    "droppableRectangle",
    "getBoundingClientRect",
    "overlaps",
    "rect",
    "left",
    "right",
    "top",
    "bottom",
    "overlapsChanged",
    "distinctUntilChanged",
    "overlapsNow",
    "dragEnter",
    "dragOver",
    "didOverlap",
    "dragLeave",
    "unsubscribe",
    "ctorParameters",
    "ElementRef",
    "DragAndDropModule",
    "forRoot",
    "ngModule",
    "providers"
  ],
  "mappings": "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"
}
