{"remainingRequest":"D:\\GitHub\\advanced project\\Schedule\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\GitHub\\advanced project\\Schedule\\node_modules\\positioning\\dist\\positioning.js","dependencies":[{"path":"D:\\GitHub\\advanced project\\Schedule\\node_modules\\positioning\\dist\\positioning.js","mtime":1503930996000},{"path":"D:\\GitHub\\advanced project\\Schedule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527675946260},{"path":"D:\\GitHub\\advanced project\\Schedule\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":499162500000}],"contextDependencies":[],"result":["// previous version:\r\n// https://github.com/angular-ui/bootstrap/blob/07c31d0731f7cb068a1932b8e01d2312b796b4ec/src/position/position.js\r\nvar Positioning = /*@__PURE__*/ (function () {\r\n    function Positioning() {\r\n    }\r\n    Positioning.prototype.getAllStyles = function (element) { return window.getComputedStyle(element); };\r\n    Positioning.prototype.getStyle = function (element, prop) { return this.getAllStyles(element)[prop]; };\r\n    Positioning.prototype.isStaticPositioned = function (element) {\r\n        return (this.getStyle(element, 'position') || 'static') === 'static';\r\n    };\r\n    Positioning.prototype.offsetParent = function (element) {\r\n        var offsetParentEl = element.offsetParent || document.documentElement;\r\n        while (offsetParentEl && offsetParentEl !== document.documentElement && this.isStaticPositioned(offsetParentEl)) {\r\n            offsetParentEl = offsetParentEl.offsetParent;\r\n        }\r\n        return offsetParentEl || document.documentElement;\r\n    };\r\n    Positioning.prototype.position = function (element, round) {\r\n        if (round === void 0) {\r\n            round = true;\r\n        }\r\n        var elPosition;\r\n        var parentOffset = { width: 0, height: 0, top: 0, bottom: 0, left: 0, right: 0 };\r\n        if (this.getStyle(element, 'position') === 'fixed') {\r\n            elPosition = element.getBoundingClientRect();\r\n        }\r\n        else {\r\n            var offsetParentEl = this.offsetParent(element);\r\n            elPosition = this.offset(element, false);\r\n            if (offsetParentEl !== document.documentElement) {\r\n                parentOffset = this.offset(offsetParentEl, false);\r\n            }\r\n            parentOffset.top += offsetParentEl.clientTop;\r\n            parentOffset.left += offsetParentEl.clientLeft;\r\n        }\r\n        elPosition.top -= parentOffset.top;\r\n        elPosition.bottom -= parentOffset.top;\r\n        elPosition.left -= parentOffset.left;\r\n        elPosition.right -= parentOffset.left;\r\n        if (round) {\r\n            elPosition.top = Math.round(elPosition.top);\r\n            elPosition.bottom = Math.round(elPosition.bottom);\r\n            elPosition.left = Math.round(elPosition.left);\r\n            elPosition.right = Math.round(elPosition.right);\r\n        }\r\n        return elPosition;\r\n    };\r\n    Positioning.prototype.offset = function (element, round) {\r\n        if (round === void 0) {\r\n            round = true;\r\n        }\r\n        var elBcr = element.getBoundingClientRect();\r\n        var viewportOffset = {\r\n            top: window.pageYOffset - document.documentElement.clientTop,\r\n            left: window.pageXOffset - document.documentElement.clientLeft\r\n        };\r\n        var elOffset = {\r\n            height: elBcr.height || element.offsetHeight,\r\n            width: elBcr.width || element.offsetWidth,\r\n            top: elBcr.top + viewportOffset.top,\r\n            bottom: elBcr.bottom + viewportOffset.top,\r\n            left: elBcr.left + viewportOffset.left,\r\n            right: elBcr.right + viewportOffset.left\r\n        };\r\n        if (round) {\r\n            elOffset.height = Math.round(elOffset.height);\r\n            elOffset.width = Math.round(elOffset.width);\r\n            elOffset.top = Math.round(elOffset.top);\r\n            elOffset.bottom = Math.round(elOffset.bottom);\r\n            elOffset.left = Math.round(elOffset.left);\r\n            elOffset.right = Math.round(elOffset.right);\r\n        }\r\n        return elOffset;\r\n    };\r\n    Positioning.prototype.positionElements = function (hostElement, targetElement, placement, appendToBody) {\r\n        var hostElPosition = appendToBody ? this.offset(hostElement, false) : this.position(hostElement, false);\r\n        var targetElStyles = this.getAllStyles(targetElement);\r\n        var targetElBCR = targetElement.getBoundingClientRect();\r\n        var placementPrimary = placement.split('-')[0] || 'top';\r\n        var placementSecondary = placement.split('-')[1] || 'center';\r\n        var targetElPosition = {\r\n            'height': targetElBCR.height || targetElement.offsetHeight,\r\n            'width': targetElBCR.width || targetElement.offsetWidth,\r\n            'top': 0,\r\n            'bottom': targetElBCR.height || targetElement.offsetHeight,\r\n            'left': 0,\r\n            'right': targetElBCR.width || targetElement.offsetWidth\r\n        };\r\n        switch (placementPrimary) {\r\n            case 'top':\r\n                targetElPosition.top =\r\n                    hostElPosition.top - (targetElement.offsetHeight + parseFloat(targetElStyles.marginBottom));\r\n                break;\r\n            case 'bottom':\r\n                targetElPosition.top = hostElPosition.top + hostElPosition.height;\r\n                break;\r\n            case 'left':\r\n                targetElPosition.left =\r\n                    hostElPosition.left - (targetElement.offsetWidth + parseFloat(targetElStyles.marginRight));\r\n                break;\r\n            case 'right':\r\n                targetElPosition.left = hostElPosition.left + hostElPosition.width;\r\n                break;\r\n        }\r\n        switch (placementSecondary) {\r\n            case 'top':\r\n                targetElPosition.top = hostElPosition.top;\r\n                break;\r\n            case 'bottom':\r\n                targetElPosition.top = hostElPosition.top + hostElPosition.height - targetElement.offsetHeight;\r\n                break;\r\n            case 'left':\r\n                targetElPosition.left = hostElPosition.left;\r\n                break;\r\n            case 'right':\r\n                targetElPosition.left = hostElPosition.left + hostElPosition.width - targetElement.offsetWidth;\r\n                break;\r\n            case 'center':\r\n                if (placementPrimary === 'top' || placementPrimary === 'bottom') {\r\n                    targetElPosition.left = hostElPosition.left + hostElPosition.width / 2 - targetElement.offsetWidth / 2;\r\n                }\r\n                else {\r\n                    targetElPosition.top = hostElPosition.top + hostElPosition.height / 2 - targetElement.offsetHeight / 2;\r\n                }\r\n                break;\r\n        }\r\n        targetElPosition.top = Math.round(targetElPosition.top);\r\n        targetElPosition.bottom = Math.round(targetElPosition.bottom);\r\n        targetElPosition.left = Math.round(targetElPosition.left);\r\n        targetElPosition.right = Math.round(targetElPosition.right);\r\n        return targetElPosition;\r\n    };\r\n    return Positioning;\r\n}());\r\nexport { Positioning };\r\nvar positionService = new Positioning();\r\nexport function positionElements(hostElement, targetElement, placement, appendToBody) {\r\n    var pos = positionService.positionElements(hostElement, targetElement, placement, appendToBody);\r\n    targetElement.style.top = pos.top + \"px\";\r\n    targetElement.style.left = pos.left + \"px\";\r\n}\r\n//# sourceMappingURL=positioning.js.map\r\n",null]}