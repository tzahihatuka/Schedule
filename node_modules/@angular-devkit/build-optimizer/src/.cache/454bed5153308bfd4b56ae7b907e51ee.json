{"remainingRequest":"D:\\GitHub\\advanced project\\Schedule\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\GitHub\\advanced project\\Schedule\\node_modules\\angular-draggable-droppable\\fesm5\\angular-draggable-droppable.js","dependencies":[{"path":"D:\\GitHub\\advanced project\\Schedule\\node_modules\\angular-draggable-droppable\\fesm5\\angular-draggable-droppable.js","mtime":499162500000},{"path":"D:\\GitHub\\advanced project\\Schedule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527675946260},{"path":"D:\\GitHub\\advanced project\\Schedule\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":499162500000}],"contextDependencies":[],"result":["/** PURE_IMPORTS_START rxjs,tslib,_angular_core,rxjs_operators PURE_IMPORTS_END */\nimport { Subject, merge } from 'rxjs';\nimport { __read } from 'tslib';\nimport { Directive, ElementRef, Renderer2, Output, EventEmitter, Input, NgZone, NgModule } from '@angular/core';\nimport { map, mergeMap, takeUntil, take, takeLast, pairwise, share, filter, distinctUntilChanged } from 'rxjs/operators';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar DraggableHelper = /*@__PURE__*/ (function () {\n    function DraggableHelper() {\n        this.currentDrag = new Subject();\n    }\n    return DraggableHelper;\n}());\nvar /** @type {?} */ MOVE_CURSOR = 'move';\nvar DraggableDirective = /*@__PURE__*/ (function () {\n    /**\n     * @hidden\n     * @param {?} element\n     * @param {?} renderer\n     * @param {?} draggableHelper\n     * @param {?} zone\n     */\n    function DraggableDirective(element, renderer, draggableHelper, zone) {\n        this.element = element;\n        this.renderer = renderer;\n        this.draggableHelper = draggableHelper;\n        this.zone = zone;\n        /**\n         * The axis along which the element is draggable\n         */\n        this.dragAxis = { x: true, y: true };\n        /**\n         * Snap all drags to an x / y grid\n         */\n        this.dragSnapGrid = {};\n        /**\n         * Show a ghost element that shows the drag when dragging\n         */\n        this.ghostDragEnabled = true;\n        /**\n         * The cursor to use when dragging the element\n         */\n        this.dragCursor = MOVE_CURSOR;\n        /**\n         * Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n         */\n        this.dragPointerDown = new EventEmitter();\n        /**\n         * Called when the element has started to be dragged.\n         * Only called after at least one mouse or touch move event\n         */\n        this.dragStart = new EventEmitter();\n        /**\n         * Called when the element is being dragged\n         */\n        this.dragging = new EventEmitter();\n        /**\n         * Called after the element is dragged\n         */\n        this.dragEnd = new EventEmitter();\n        /**\n         * @hidden\n         */\n        this.pointerDown = new Subject();\n        /**\n         * @hidden\n         */\n        this.pointerMove = new Subject();\n        /**\n         * @hidden\n         */\n        this.pointerUp = new Subject();\n        this.eventListenerSubscriptions = {};\n    }\n    /**\n     * @return {?}\n     */\n    DraggableDirective.prototype.ngOnInit = function () {\n        var _this = this;\n        this.checkEventListeners();\n        var /** @type {?} */ pointerDrag = this.pointerDown\n            .pipe(filter(function () { return _this.canDrag(); }))\n            .pipe(mergeMap(function (pointerDownEvent) {\n            var /** @type {?} */ currentDrag = new Subject();\n            _this.zone.run(function () {\n                _this.dragPointerDown.next({ x: 0, y: 0 });\n            });\n            var /** @type {?} */ pointerMove = _this.pointerMove\n                .pipe(map(function (pointerMoveEvent) {\n                pointerMoveEvent.event.preventDefault();\n                return {\n                    currentDrag: currentDrag,\n                    x: pointerMoveEvent.clientX - pointerDownEvent.clientX,\n                    y: pointerMoveEvent.clientY - pointerDownEvent.clientY,\n                    clientX: pointerMoveEvent.clientX,\n                    clientY: pointerMoveEvent.clientY\n                };\n            }))\n                .pipe(map(function (moveData) {\n                if (_this.dragSnapGrid.x) {\n                    moveData.x =\n                        Math.floor(moveData.x / _this.dragSnapGrid.x) *\n                            _this.dragSnapGrid.x;\n                }\n                if (_this.dragSnapGrid.y) {\n                    moveData.y =\n                        Math.floor(moveData.y / _this.dragSnapGrid.y) *\n                            _this.dragSnapGrid.y;\n                }\n                return moveData;\n            }))\n                .pipe(map(function (moveData) {\n                if (!_this.dragAxis.x) {\n                    moveData.x = 0;\n                }\n                if (!_this.dragAxis.y) {\n                    moveData.y = 0;\n                }\n                return moveData;\n            }))\n                .pipe(filter(function (_a) {\n                var x = _a.x, y = _a.y;\n                return !_this.validateDrag || _this.validateDrag({ x: x, y: y });\n            }))\n                .pipe(takeUntil(merge(_this.pointerUp, _this.pointerDown)))\n                .pipe(share());\n            pointerMove.pipe(take(1)).subscribe(function () {\n                pointerDownEvent.event.preventDefault();\n                _this.zone.run(function () {\n                    _this.dragStart.next({ x: 0, y: 0 });\n                });\n                _this.setCursor(_this.dragCursor);\n                _this.draggableHelper.currentDrag.next(currentDrag);\n            });\n            pointerMove.pipe(takeLast(1)).subscribe(function (_a) {\n                var x = _a.x, y = _a.y;\n                _this.zone.run(function () {\n                    _this.dragEnd.next({ x: x, y: y });\n                });\n                currentDrag.complete();\n                _this.setCssTransform(null);\n                if (_this.ghostDragEnabled) {\n                    _this.renderer.setStyle(_this.element.nativeElement, 'pointerEvents', null);\n                }\n            });\n            return pointerMove;\n        }))\n            .pipe(share());\n        merge(pointerDrag.pipe(take(1)).pipe(map(function (value) { return [, value]; })), pointerDrag.pipe(pairwise()))\n            .pipe(filter(function (_a) {\n            var _b = __read(_a, 2), previous = _b[0], next = _b[1];\n            if (!previous) {\n                return true;\n            }\n            return previous.x !== next.x || previous.y !== next.y;\n        }))\n            .pipe(map(function (_a) {\n            var _b = __read(_a, 2), previous = _b[0], next = _b[1];\n            return next;\n        }))\n            .subscribe(function (_a) {\n            var x = _a.x, y = _a.y, currentDrag = _a.currentDrag, clientX = _a.clientX, clientY = _a.clientY;\n            _this.zone.run(function () {\n                _this.dragging.next({ x: x, y: y });\n            });\n            if (_this.ghostDragEnabled) {\n                _this.renderer.setStyle(_this.element.nativeElement, 'pointerEvents', 'none');\n            }\n            _this.setCssTransform(\"translate(\" + x + \"px, \" + y + \"px)\");\n            currentDrag.next({\n                clientX: clientX,\n                clientY: clientY,\n                dropData: _this.dropData\n            });\n        });\n    };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    DraggableDirective.prototype.ngOnChanges = function (changes) {\n        if (changes['dragAxis']) {\n            this.checkEventListeners();\n        }\n    };\n    /**\n     * @return {?}\n     */\n    DraggableDirective.prototype.ngOnDestroy = function () {\n        this.unsubscribeEventListeners();\n        this.pointerDown.complete();\n        this.pointerMove.complete();\n        this.pointerUp.complete();\n    };\n    /**\n     * @return {?}\n     */\n    DraggableDirective.prototype.checkEventListeners = function () {\n        var _this = this;\n        var /** @type {?} */ canDrag = this.canDrag();\n        var /** @type {?} */ hasEventListeners = Object.keys(this.eventListenerSubscriptions).length > 0;\n        if (canDrag && !hasEventListeners) {\n            this.zone.runOutsideAngular(function () {\n                _this.eventListenerSubscriptions.mousedown = _this.renderer.listen(_this.element.nativeElement, 'mousedown', function (event) {\n                    _this.onMouseDown(event);\n                });\n                _this.eventListenerSubscriptions.mouseup = _this.renderer.listen('document', 'mouseup', function (event) {\n                    _this.onMouseUp(event);\n                });\n                _this.eventListenerSubscriptions.touchstart = _this.renderer.listen(_this.element.nativeElement, 'touchstart', function (event) {\n                    _this.onTouchStart(event);\n                });\n                _this.eventListenerSubscriptions.touchend = _this.renderer.listen('document', 'touchend', function (event) {\n                    _this.onTouchEnd(event);\n                });\n                _this.eventListenerSubscriptions.touchcancel = _this.renderer.listen('document', 'touchcancel', function (event) {\n                    _this.onTouchEnd(event);\n                });\n                _this.eventListenerSubscriptions.mouseenter = _this.renderer.listen(_this.element.nativeElement, 'mouseenter', function () {\n                    _this.onMouseEnter();\n                });\n                _this.eventListenerSubscriptions.mouseleave = _this.renderer.listen(_this.element.nativeElement, 'mouseleave', function () {\n                    _this.onMouseLeave();\n                });\n            });\n        }\n        else if (!canDrag && hasEventListeners) {\n            this.unsubscribeEventListeners();\n        }\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    DraggableDirective.prototype.onMouseDown = function (event) {\n        var _this = this;\n        if (!this.eventListenerSubscriptions.mousemove) {\n            this.eventListenerSubscriptions.mousemove = this.renderer.listen('document', 'mousemove', function (mouseMoveEvent) {\n                _this.pointerMove.next({\n                    event: mouseMoveEvent,\n                    clientX: mouseMoveEvent.clientX,\n                    clientY: mouseMoveEvent.clientY\n                });\n            });\n        }\n        this.pointerDown.next({\n            event: event,\n            clientX: event.clientX,\n            clientY: event.clientY\n        });\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    DraggableDirective.prototype.onMouseUp = function (event) {\n        if (this.eventListenerSubscriptions.mousemove) {\n            this.eventListenerSubscriptions.mousemove();\n            delete this.eventListenerSubscriptions.mousemove;\n        }\n        this.pointerUp.next({\n            event: event,\n            clientX: event.clientX,\n            clientY: event.clientY\n        });\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    DraggableDirective.prototype.onTouchStart = function (event) {\n        var _this = this;\n        if (!this.eventListenerSubscriptions.touchmove) {\n            this.eventListenerSubscriptions.touchmove = this.renderer.listen('document', 'touchmove', function (touchMoveEvent) {\n                _this.pointerMove.next({\n                    event: touchMoveEvent,\n                    clientX: touchMoveEvent.targetTouches[0].clientX,\n                    clientY: touchMoveEvent.targetTouches[0].clientY\n                });\n            });\n        }\n        this.pointerDown.next({\n            event: event,\n            clientX: event.touches[0].clientX,\n            clientY: event.touches[0].clientY\n        });\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    DraggableDirective.prototype.onTouchEnd = function (event) {\n        if (this.eventListenerSubscriptions.touchmove) {\n            this.eventListenerSubscriptions.touchmove();\n            delete this.eventListenerSubscriptions.touchmove;\n        }\n        this.pointerUp.next({\n            event: event,\n            clientX: event.changedTouches[0].clientX,\n            clientY: event.changedTouches[0].clientY\n        });\n    };\n    /**\n     * @return {?}\n     */\n    DraggableDirective.prototype.onMouseEnter = function () {\n        this.setCursor(this.dragCursor);\n    };\n    /**\n     * @return {?}\n     */\n    DraggableDirective.prototype.onMouseLeave = function () {\n        this.setCursor(null);\n    };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    DraggableDirective.prototype.setCssTransform = function (value) {\n        var _this = this;\n        if (this.ghostDragEnabled) {\n            var /** @type {?} */ transformAttributes = [\n                'transform',\n                '-webkit-transform',\n                '-ms-transform',\n                '-moz-transform',\n                '-o-transform'\n            ];\n            transformAttributes.forEach(function (transformAttribute) {\n                _this.renderer.setStyle(_this.element.nativeElement, transformAttribute, value);\n            });\n        }\n    };\n    /**\n     * @return {?}\n     */\n    DraggableDirective.prototype.canDrag = function () {\n        return this.dragAxis.x || this.dragAxis.y;\n    };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    DraggableDirective.prototype.setCursor = function (value) {\n        this.renderer.setStyle(this.element.nativeElement, 'cursor', value);\n    };\n    /**\n     * @return {?}\n     */\n    DraggableDirective.prototype.unsubscribeEventListeners = function () {\n        var _this = this;\n        Object.keys(this.eventListenerSubscriptions).forEach(function (type) {\n            ((_this)).eventListenerSubscriptions[type]();\n            delete ((_this)).eventListenerSubscriptions[type];\n        });\n    };\n    return DraggableDirective;\n}());\n/**\n * @param {?} clientX\n * @param {?} clientY\n * @param {?} rect\n * @return {?}\n */\nfunction isCoordinateWithinRectangle(clientX, clientY, rect) {\n    return (clientX >= rect.left &&\n        clientX <= rect.right &&\n        clientY >= rect.top &&\n        clientY <= rect.bottom);\n}\nvar DroppableDirective = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} element\n     * @param {?} draggableHelper\n     * @param {?} zone\n     */\n    function DroppableDirective(element, draggableHelper, zone) {\n        this.element = element;\n        this.draggableHelper = draggableHelper;\n        this.zone = zone;\n        /**\n         * Called when a draggable element starts overlapping the element\n         */\n        this.dragEnter = new EventEmitter();\n        /**\n         * Called when a draggable element stops overlapping the element\n         */\n        this.dragLeave = new EventEmitter();\n        /**\n         * Called when a draggable element is moved over the element\n         */\n        this.dragOver = new EventEmitter();\n        /**\n         * Called when a draggable element is dropped on this element\n         */\n        this.drop = new EventEmitter();\n    }\n    /**\n     * @return {?}\n     */\n    DroppableDirective.prototype.ngOnInit = function () {\n        var _this = this;\n        this.currentDragSubscription = this.draggableHelper.currentDrag.subscribe(function (drag) {\n            var /** @type {?} */ droppableRectangle = _this.element.nativeElement.getBoundingClientRect();\n            var /** @type {?} */ currentDragDropData;\n            var /** @type {?} */ overlaps = drag.pipe(map(function (_a) {\n                var clientX = _a.clientX, clientY = _a.clientY, dropData = _a.dropData;\n                currentDragDropData = dropData;\n                return isCoordinateWithinRectangle(clientX, clientY, droppableRectangle);\n            }));\n            var /** @type {?} */ overlapsChanged = overlaps.pipe(distinctUntilChanged());\n            var /** @type {?} */ dragOverActive; // TODO - see if there's a way of doing this via rxjs\n            overlapsChanged\n                .pipe(filter(function (overlapsNow) { return overlapsNow; }))\n                .subscribe(function () {\n                dragOverActive = true;\n                _this.zone.run(function () {\n                    _this.dragEnter.next({\n                        dropData: currentDragDropData\n                    });\n                });\n            });\n            overlaps.pipe(filter(function (overlapsNow) { return overlapsNow; })).subscribe(function () {\n                _this.zone.run(function () {\n                    _this.dragOver.next({\n                        dropData: currentDragDropData\n                    });\n                });\n            });\n            overlapsChanged\n                .pipe(pairwise())\n                .pipe(filter(function (_a) {\n                var _b = __read(_a, 2), didOverlap = _b[0], overlapsNow = _b[1];\n                return didOverlap && !overlapsNow;\n            }))\n                .subscribe(function () {\n                dragOverActive = false;\n                _this.zone.run(function () {\n                    _this.dragLeave.next({\n                        dropData: currentDragDropData\n                    });\n                });\n            });\n            drag.pipe(mergeMap(function () { return overlaps; })).subscribe({\n                complete: function () {\n                    if (dragOverActive) {\n                        _this.zone.run(function () {\n                            _this.drop.next({\n                                dropData: currentDragDropData\n                            });\n                        });\n                    }\n                }\n            });\n        });\n    };\n    /**\n     * @return {?}\n     */\n    DroppableDirective.prototype.ngOnDestroy = function () {\n        this.currentDragSubscription.unsubscribe();\n    };\n    return DroppableDirective;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar DragAndDropModule = /*@__PURE__*/ (function () {\n    function DragAndDropModule() {\n    }\n    /**\n     * @return {?}\n     */\n    DragAndDropModule.forRoot = function () {\n        return {\n            ngModule: DragAndDropModule,\n            providers: [DraggableHelper]\n        };\n    };\n    return DragAndDropModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nexport { DragAndDropModule, DraggableHelper, DraggableDirective as ɵa, DroppableDirective as ɵb };\n//# sourceMappingURL=angular-draggable-droppable.js.map\n",null]}