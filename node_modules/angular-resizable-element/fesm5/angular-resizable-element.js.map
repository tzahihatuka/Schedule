{
  "version": 3,
  "file": "angular-resizable-element.js",
  "sources": [
    "ng://angular-resizable-element/src/resizable.module.ts",
    "ng://angular-resizable-element/src/resize-handle.directive.ts",
    "ng://angular-resizable-element/src/resizable.directive.ts"
  ],
  "sourcesContent": [
    "import { NgModule } from '@angular/core';\nimport { ResizableDirective } from './resizable.directive';\nimport { ResizeHandleDirective } from './resize-handle.directive';\n\n@NgModule({\n  declarations: [ResizableDirective, ResizeHandleDirective],\n  exports: [ResizableDirective, ResizeHandleDirective]\n})\nexport class ResizableModule {}\n",
    "import {\n  Directive,\n  Input,\n  HostListener,\n  Renderer2,\n  ElementRef,\n  OnDestroy,\n  NgZone\n} from '@angular/core';\nimport { ResizableDirective } from './resizable.directive';\nimport { Edges } from './interfaces/edges.interface';\n\n/**\n * An element placed inside a `mwlResizable` directive to be used as a drag and resize handle\n *\n * For example\n *\n * ```html\n * <div mwlResizable>\n *   <div mwlResizeHandle [resizeEdges]=\"{bottom: true, right: true}\"></div>\n * </div>\n * ```\n */\n@Directive({\n  selector: '[mwlResizeHandle]'\n})\nexport class ResizeHandleDirective implements OnDestroy {\n  /**\n   * The `Edges` object that contains the edges of the parent element that dragging the handle will trigger a resize on\n   */\n  @Input() resizeEdges: Edges = {};\n\n  private eventListeners: {\n    touchmove?: () => void;\n    mousemove?: () => void;\n    [key: string]: (() => void) | undefined;\n  } = {};\n\n  constructor(\n    private renderer: Renderer2,\n    private element: ElementRef,\n    private zone: NgZone,\n    private resizable: ResizableDirective\n  ) {}\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n  }\n\n  /**\n   * @hidden\n   */\n  @HostListener('touchstart', [\n    '$event',\n    '$event.touches[0].clientX',\n    '$event.touches[0].clientY'\n  ])\n  @HostListener('mousedown', ['$event', '$event.clientX', '$event.clientY'])\n  onMousedown(\n    event: MouseEvent | TouchEvent,\n    clientX: number,\n    clientY: number\n  ): void {\n    event.preventDefault();\n    this.zone.runOutsideAngular(() => {\n      if (!this.eventListeners.touchmove) {\n        this.eventListeners.touchmove = this.renderer.listen(\n          this.element.nativeElement,\n          'touchmove',\n          (touchMoveEvent: TouchEvent) => {\n            this.onMousemove(\n              touchMoveEvent,\n              touchMoveEvent.targetTouches[0].clientX,\n              touchMoveEvent.targetTouches[0].clientY\n            );\n          }\n        );\n      }\n      if (!this.eventListeners.mousemove) {\n        this.eventListeners.mousemove = this.renderer.listen(\n          this.element.nativeElement,\n          'mousemove',\n          (mouseMoveEvent: MouseEvent) => {\n            this.onMousemove(\n              mouseMoveEvent,\n              mouseMoveEvent.clientX,\n              mouseMoveEvent.clientY\n            );\n          }\n        );\n      }\n      this.resizable.mousedown.next({\n        clientX,\n        clientY,\n        edges: this.resizeEdges\n      });\n    });\n  }\n\n  /**\n   * @hidden\n   */\n  @HostListener('touchend', [\n    '$event.changedTouches[0].clientX',\n    '$event.changedTouches[0].clientY'\n  ])\n  @HostListener('touchcancel', [\n    '$event.changedTouches[0].clientX',\n    '$event.changedTouches[0].clientY'\n  ])\n  @HostListener('mouseup', ['$event.clientX', '$event.clientY'])\n  onMouseup(clientX: number, clientY: number): void {\n    this.zone.runOutsideAngular(() => {\n      this.unsubscribeEventListeners();\n      this.resizable.mouseup.next({\n        clientX,\n        clientY,\n        edges: this.resizeEdges\n      });\n    });\n  }\n\n  private onMousemove(\n    event: MouseEvent | TouchEvent,\n    clientX: number,\n    clientY: number\n  ): void {\n    this.resizable.mousemove.next({\n      clientX,\n      clientY,\n      edges: this.resizeEdges,\n      event\n    });\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListeners).forEach(type => {\n      (this as any).eventListeners[type]();\n      delete this.eventListeners[type];\n    });\n  }\n}\n",
    "import {\n  Directive,\n  Renderer2,\n  ElementRef,\n  OnInit,\n  Output,\n  Input,\n  EventEmitter,\n  OnDestroy,\n  NgZone\n} from '@angular/core';\nimport { Subject, Observable, Observer, merge, interval } from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  filter,\n  pairwise,\n  take,\n  throttle,\n  share\n} from 'rxjs/operators';\nimport { Edges } from './interfaces/edges.interface';\nimport { BoundingRectangle } from './interfaces/bounding-rectangle.interface';\nimport { ResizeEvent } from './interfaces/resize-event.interface';\n\ninterface PointerEventCoordinate {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\ninterface Coordinate {\n  x: number;\n  y: number;\n}\n\nfunction isNumberCloseTo(\n  value1: number,\n  value2: number,\n  precision: number = 3\n): boolean {\n  const diff: number = Math.abs(value1 - value2);\n  return diff < precision;\n}\n\nfunction getNewBoundingRectangle(\n  startingRect: BoundingRectangle,\n  edges: Edges,\n  clientX: number,\n  clientY: number\n): BoundingRectangle {\n  const newBoundingRect: BoundingRectangle = {\n    top: startingRect.top,\n    bottom: startingRect.bottom,\n    left: startingRect.left,\n    right: startingRect.right\n  };\n\n  if (edges.top) {\n    newBoundingRect.top += clientY;\n  }\n  if (edges.bottom) {\n    newBoundingRect.bottom += clientY;\n  }\n  if (edges.left) {\n    newBoundingRect.left += clientX;\n  }\n  if (edges.right) {\n    newBoundingRect.right += clientX;\n  }\n  newBoundingRect.height = newBoundingRect.bottom - newBoundingRect.top;\n  newBoundingRect.width = newBoundingRect.right - newBoundingRect.left;\n\n  return newBoundingRect;\n}\n\nfunction getElementRect(\n  element: ElementRef,\n  ghostElementPositioning: string\n): BoundingRectangle {\n  let translateX = 0;\n  let translateY = 0;\n  const style = element.nativeElement.style;\n  const transformProperties = [\n    'transform',\n    '-ms-transform',\n    '-moz-transform',\n    '-o-transform'\n  ];\n  const transform = transformProperties\n    .map(property => style[property])\n    .find(value => !!value);\n  if (transform && transform.includes('translate')) {\n    translateX = transform.replace(/.*translate\\((.*)px, (.*)px\\).*/, '$1');\n    translateY = transform.replace(/.*translate\\((.*)px, (.*)px\\).*/, '$2');\n  }\n\n  if (ghostElementPositioning === 'absolute') {\n    return {\n      height: element.nativeElement.offsetHeight,\n      width: element.nativeElement.offsetWidth,\n      top: element.nativeElement.offsetTop - translateY,\n      bottom:\n        element.nativeElement.offsetHeight +\n        element.nativeElement.offsetTop -\n        translateY,\n      left: element.nativeElement.offsetLeft - translateX,\n      right:\n        element.nativeElement.offsetWidth +\n        element.nativeElement.offsetLeft -\n        translateX\n    };\n  } else {\n    const boundingRect: BoundingRectangle = element.nativeElement.getBoundingClientRect();\n    return {\n      height: boundingRect.height,\n      width: boundingRect.width,\n      top: boundingRect.top - translateY,\n      bottom: boundingRect.bottom - translateY,\n      left: boundingRect.left - translateX,\n      right: boundingRect.right - translateX,\n      scrollTop: element.nativeElement.scrollTop,\n      scrollLeft: element.nativeElement.scrollLeft\n    };\n  }\n}\n\nfunction isWithinBoundingY({\n  clientY,\n  rect\n}: {\n  clientY: number;\n  rect: ClientRect;\n}): boolean {\n  return clientY >= rect.top && clientY <= rect.bottom;\n}\n\nfunction isWithinBoundingX({\n  clientX,\n  rect\n}: {\n  clientX: number;\n  rect: ClientRect;\n}): boolean {\n  return clientX >= rect.left && clientX <= rect.right;\n}\n\nfunction getResizeEdges({\n  clientX,\n  clientY,\n  elm,\n  allowedEdges,\n  cursorPrecision\n}: {\n  clientX: number;\n  clientY: number;\n  elm: ElementRef;\n  allowedEdges: Edges;\n  cursorPrecision: number;\n}): Edges {\n  const elmPosition: ClientRect = elm.nativeElement.getBoundingClientRect();\n  const edges: Edges = {};\n\n  if (\n    allowedEdges.left &&\n    isNumberCloseTo(clientX, elmPosition.left, cursorPrecision) &&\n    isWithinBoundingY({ clientY, rect: elmPosition })\n  ) {\n    edges.left = true;\n  }\n\n  if (\n    allowedEdges.right &&\n    isNumberCloseTo(clientX, elmPosition.right, cursorPrecision) &&\n    isWithinBoundingY({ clientY, rect: elmPosition })\n  ) {\n    edges.right = true;\n  }\n\n  if (\n    allowedEdges.top &&\n    isNumberCloseTo(clientY, elmPosition.top, cursorPrecision) &&\n    isWithinBoundingX({ clientX, rect: elmPosition })\n  ) {\n    edges.top = true;\n  }\n\n  if (\n    allowedEdges.bottom &&\n    isNumberCloseTo(clientY, elmPosition.bottom, cursorPrecision) &&\n    isWithinBoundingX({ clientX, rect: elmPosition })\n  ) {\n    edges.bottom = true;\n  }\n\n  return edges;\n}\n\nexport interface ResizeCursors {\n  topLeft: string;\n  topRight: string;\n  bottomLeft: string;\n  bottomRight: string;\n  leftOrRight: string;\n  topOrBottom: string;\n}\n\nconst DEFAULT_RESIZE_CURSORS: ResizeCursors = Object.freeze({\n  topLeft: 'nw-resize',\n  topRight: 'ne-resize',\n  bottomLeft: 'sw-resize',\n  bottomRight: 'se-resize',\n  leftOrRight: 'ew-resize',\n  topOrBottom: 'ns-resize'\n});\n\nfunction getResizeCursor(edges: Edges, cursors: ResizeCursors): string {\n  if (edges.left && edges.top) {\n    return cursors.topLeft;\n  } else if (edges.right && edges.top) {\n    return cursors.topRight;\n  } else if (edges.left && edges.bottom) {\n    return cursors.bottomLeft;\n  } else if (edges.right && edges.bottom) {\n    return cursors.bottomRight;\n  } else if (edges.left || edges.right) {\n    return cursors.leftOrRight;\n  } else if (edges.top || edges.bottom) {\n    return cursors.topOrBottom;\n  } else {\n    return '';\n  }\n}\n\nfunction getEdgesDiff({\n  edges,\n  initialRectangle,\n  newRectangle\n}: {\n  edges: Edges;\n  initialRectangle: BoundingRectangle;\n  newRectangle: BoundingRectangle;\n}): Edges {\n  const edgesDiff: Edges = {};\n  Object.keys(edges).forEach(edge => {\n    edgesDiff[edge] = (newRectangle[edge] || 0) - (initialRectangle[edge] || 0);\n  });\n  return edgesDiff;\n}\n\nconst RESIZE_ACTIVE_CLASS: string = 'resize-active';\nconst RESIZE_LEFT_HOVER_CLASS: string = 'resize-left-hover';\nconst RESIZE_RIGHT_HOVER_CLASS: string = 'resize-right-hover';\nconst RESIZE_TOP_HOVER_CLASS: string = 'resize-top-hover';\nconst RESIZE_BOTTOM_HOVER_CLASS: string = 'resize-bottom-hover';\nconst RESIZE_GHOST_ELEMENT_CLASS: string = 'resize-ghost-element';\n\nexport const MOUSE_MOVE_THROTTLE_MS: number = 50;\n\n/**\n * Place this on an element to make it resizable. For example:\n *\n * ```html\n * <div\n *   mwlResizable\n *   [resizeEdges]=\"{bottom: true, right: true, top: true, left: true}\"\n *   [enableGhostResize]=\"true\">\n * </div>\n * ```\n */\n@Directive({\n  selector: '[mwlResizable]'\n})\nexport class ResizableDirective implements OnInit, OnDestroy {\n  /**\n   * A function that will be called before each resize event. Return `true` to allow the resize event to propagate or `false` to cancel it\n   */\n  @Input() validateResize: (resizeEvent: ResizeEvent) => boolean;\n\n  /**\n   * The edges that an element can be resized from. Pass an object like `{top: true, bottom: false}`. By default no edges can be resized.\n   */\n  @Input() resizeEdges: Edges = {};\n\n  /**\n   * Set to `true` to enable a temporary resizing effect of the element in between the `resizeStart` and `resizeEnd` events.\n   */\n  @Input() enableGhostResize: boolean = false;\n\n  /**\n   * A snap grid that resize events will be locked to.\n   *\n   * e.g. to only allow the element to be resized every 10px set it to `{left: 10, right: 10}`\n   */\n  @Input() resizeSnapGrid: Edges = {};\n\n  /**\n   * The mouse cursors that will be set on the resize edges\n   */\n  @Input() resizeCursors: ResizeCursors = DEFAULT_RESIZE_CURSORS;\n\n  /**\n   * Mouse over thickness to active cursor.\n   */\n  @Input() resizeCursorPrecision: number = 3;\n\n  /**\n   * Define the positioning of the ghost element (can be fixed or absolute)\n   */\n  @Input() ghostElementPositioning: 'fixed' | 'absolute' = 'fixed';\n\n  /**\n   * Called when the mouse is pressed and a resize event is about to begin. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizeStart = new EventEmitter<ResizeEvent>();\n\n  /**\n   * Called as the mouse is dragged after a resize event has begun. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizing = new EventEmitter<ResizeEvent>();\n\n  /**\n   * Called after the mouse is released after a resize event. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizeEnd = new EventEmitter<ResizeEvent>();\n\n  /**\n   * @hidden\n   */\n  public mouseup = new Subject<{\n    clientX: number;\n    clientY: number;\n    edges?: Edges;\n  }>();\n\n  /**\n   * @hidden\n   */\n  public mousedown = new Subject<{\n    clientX: number;\n    clientY: number;\n    edges?: Edges;\n  }>();\n\n  /**\n   * @hidden\n   */\n  public mousemove = new Subject<{\n    clientX: number;\n    clientY: number;\n    edges?: Edges;\n    event: MouseEvent | TouchEvent;\n  }>();\n\n  private pointerEventListeners: PointerEventListeners;\n\n  private pointerEventListenerSubscriptions: any = {};\n\n  /**\n   * @hidden\n   */\n  constructor(\n    private renderer: Renderer2,\n    public elm: ElementRef,\n    private zone: NgZone\n  ) {\n    this.pointerEventListeners = PointerEventListeners.getInstance(\n      renderer,\n      zone\n    );\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnInit(): void {\n    // TODO - use some fancy Observable.merge's for this\n    this.pointerEventListenerSubscriptions.pointerDown = this.pointerEventListeners.pointerDown.subscribe(\n      ({ clientX, clientY }) => {\n        this.mousedown.next({ clientX, clientY });\n      }\n    );\n\n    this.pointerEventListenerSubscriptions.pointerMove = this.pointerEventListeners.pointerMove.subscribe(\n      ({ clientX, clientY, event }) => {\n        this.mousemove.next({ clientX, clientY, event });\n      }\n    );\n\n    this.pointerEventListenerSubscriptions.pointerUp = this.pointerEventListeners.pointerUp.subscribe(\n      ({ clientX, clientY }) => {\n        this.mouseup.next({ clientX, clientY });\n      }\n    );\n\n    let currentResize: {\n      edges: Edges;\n      startingRect: BoundingRectangle;\n      currentRect: BoundingRectangle;\n      clonedNode?: HTMLElement;\n    } | null;\n\n    const removeGhostElement = () => {\n      if (currentResize && currentResize.clonedNode) {\n        this.elm.nativeElement.parentElement.removeChild(\n          currentResize.clonedNode\n        );\n        this.renderer.setStyle(this.elm.nativeElement, 'visibility', 'inherit');\n      }\n    };\n\n    const mouseMove: Observable<any> = this.mousemove.pipe(share());\n\n    mouseMove.pipe(filter(() => !!currentResize)).subscribe(({ event }) => {\n      event.preventDefault();\n    });\n\n    mouseMove\n      .pipe(throttle(() => interval(MOUSE_MOVE_THROTTLE_MS)))\n      .subscribe(({ clientX, clientY }) => {\n        const resizeEdges: Edges = getResizeEdges({\n          clientX,\n          clientY,\n          elm: this.elm,\n          allowedEdges: this.resizeEdges,\n          cursorPrecision: this.resizeCursorPrecision\n        });\n        const resizeCursors: ResizeCursors = Object.assign(\n          {},\n          DEFAULT_RESIZE_CURSORS,\n          this.resizeCursors\n        );\n        if (currentResize) {\n          const cursor: string = getResizeCursor(\n            currentResize.edges,\n            resizeCursors\n          );\n          this.renderer.setStyle(document.body, 'cursor', cursor);\n        } else {\n          const cursor: string = getResizeCursor(resizeEdges, resizeCursors);\n          this.renderer.setStyle(this.elm.nativeElement, 'cursor', cursor);\n        }\n        this.setElementClass(this.elm, RESIZE_ACTIVE_CLASS, !!currentResize);\n        this.setElementClass(\n          this.elm,\n          RESIZE_LEFT_HOVER_CLASS,\n          resizeEdges.left === true\n        );\n        this.setElementClass(\n          this.elm,\n          RESIZE_RIGHT_HOVER_CLASS,\n          resizeEdges.right === true\n        );\n        this.setElementClass(\n          this.elm,\n          RESIZE_TOP_HOVER_CLASS,\n          resizeEdges.top === true\n        );\n        this.setElementClass(\n          this.elm,\n          RESIZE_BOTTOM_HOVER_CLASS,\n          resizeEdges.bottom === true\n        );\n      });\n\n    const mousedrag: Observable<any> = this.mousedown\n      .pipe(\n        mergeMap(startCoords => {\n          function getDiff(moveCoords: { clientX: number; clientY: number }) {\n            return {\n              clientX: moveCoords.clientX - startCoords.clientX,\n              clientY: moveCoords.clientY - startCoords.clientY\n            };\n          }\n\n          const getSnapGrid = () => {\n            const snapGrid: Coordinate = { x: 1, y: 1 };\n\n            if (currentResize) {\n              if (this.resizeSnapGrid.left && currentResize.edges.left) {\n                snapGrid.x = +this.resizeSnapGrid.left;\n              } else if (\n                this.resizeSnapGrid.right &&\n                currentResize.edges.right\n              ) {\n                snapGrid.x = +this.resizeSnapGrid.right;\n              }\n\n              if (this.resizeSnapGrid.top && currentResize.edges.top) {\n                snapGrid.y = +this.resizeSnapGrid.top;\n              } else if (\n                this.resizeSnapGrid.bottom &&\n                currentResize.edges.bottom\n              ) {\n                snapGrid.y = +this.resizeSnapGrid.bottom;\n              }\n            }\n\n            return snapGrid;\n          };\n\n          function getGrid(\n            coords: { clientX: number; clientY: number },\n            snapGrid: Coordinate\n          ) {\n            return {\n              x: Math.ceil(coords.clientX / snapGrid.x),\n              y: Math.ceil(coords.clientY / snapGrid.y)\n            };\n          }\n\n          return merge(\n            mouseMove.pipe(take(1)).pipe(map(coords => [, coords])),\n            mouseMove.pipe(pairwise())\n          )\n            .pipe(\n              map(([previousCoords, newCoords]) => {\n                return [\n                  previousCoords ? getDiff(previousCoords) : previousCoords,\n                  getDiff(newCoords)\n                ];\n              })\n            )\n            .pipe(\n              filter(([previousCoords, newCoords]) => {\n                if (!previousCoords) {\n                  return true;\n                }\n\n                const snapGrid: Coordinate = getSnapGrid();\n                const previousGrid: Coordinate = getGrid(\n                  previousCoords,\n                  snapGrid\n                );\n                const newGrid: Coordinate = getGrid(newCoords, snapGrid);\n\n                return (\n                  previousGrid.x !== newGrid.x || previousGrid.y !== newGrid.y\n                );\n              })\n            )\n            .pipe(\n              map(([, newCoords]) => {\n                const snapGrid: Coordinate = getSnapGrid();\n                return {\n                  clientX:\n                    Math.round(newCoords.clientX / snapGrid.x) * snapGrid.x,\n                  clientY:\n                    Math.round(newCoords.clientY / snapGrid.y) * snapGrid.y\n                };\n              })\n            )\n            .pipe(takeUntil(merge(this.mouseup, this.mousedown)));\n        })\n      )\n      .pipe(filter(() => !!currentResize));\n\n    mousedrag\n      .pipe(\n        map(({ clientX, clientY }) => {\n          return getNewBoundingRectangle(\n            currentResize!.startingRect,\n            currentResize!.edges,\n            clientX,\n            clientY\n          );\n        })\n      )\n      .pipe(\n        filter((newBoundingRect: BoundingRectangle) => {\n          return !!(\n            newBoundingRect.height &&\n            newBoundingRect.width &&\n            newBoundingRect.height > 0 &&\n            newBoundingRect.width > 0\n          );\n        })\n      )\n      .pipe(\n        filter((newBoundingRect: BoundingRectangle) => {\n          return this.validateResize\n            ? this.validateResize({\n                rectangle: newBoundingRect,\n                edges: getEdgesDiff({\n                  edges: currentResize!.edges,\n                  initialRectangle: currentResize!.startingRect,\n                  newRectangle: newBoundingRect\n                })\n              })\n            : true;\n        })\n      )\n      .subscribe((newBoundingRect: BoundingRectangle) => {\n        if (currentResize && currentResize.clonedNode) {\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'height',\n            `${newBoundingRect.height}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'width',\n            `${newBoundingRect.width}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'top',\n            `${newBoundingRect.top}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'left',\n            `${newBoundingRect.left}px`\n          );\n        }\n\n        this.zone.run(() => {\n          this.resizing.emit({\n            edges: getEdgesDiff({\n              edges: currentResize!.edges,\n              initialRectangle: currentResize!.startingRect,\n              newRectangle: newBoundingRect\n            }),\n            rectangle: newBoundingRect\n          });\n        });\n\n        currentResize!.currentRect = newBoundingRect;\n      });\n\n    this.mousedown\n      .pipe(\n        map(({ clientX, clientY, edges }) => {\n          return (\n            edges ||\n            getResizeEdges({\n              clientX,\n              clientY,\n              elm: this.elm,\n              allowedEdges: this.resizeEdges,\n              cursorPrecision: this.resizeCursorPrecision\n            })\n          );\n        })\n      )\n      .pipe(\n        filter((edges: Edges) => {\n          return Object.keys(edges).length > 0;\n        })\n      )\n      .subscribe((edges: Edges) => {\n        if (currentResize) {\n          removeGhostElement();\n        }\n        const startingRect: BoundingRectangle = getElementRect(\n          this.elm,\n          this.ghostElementPositioning\n        );\n        currentResize = {\n          edges,\n          startingRect,\n          currentRect: startingRect\n        };\n        if (this.enableGhostResize) {\n          currentResize.clonedNode = this.elm.nativeElement.cloneNode(true);\n          const resizeCursors: ResizeCursors = Object.assign(\n            {},\n            DEFAULT_RESIZE_CURSORS,\n            this.resizeCursors\n          );\n          this.elm.nativeElement.parentElement.appendChild(\n            currentResize.clonedNode\n          );\n          this.renderer.setStyle(\n            this.elm.nativeElement,\n            'visibility',\n            'hidden'\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'position',\n            this.ghostElementPositioning\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'left',\n            `${currentResize.startingRect.left}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'top',\n            `${currentResize.startingRect.top}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'height',\n            `${currentResize.startingRect.height}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'width',\n            `${currentResize.startingRect.width}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'cursor',\n            getResizeCursor(currentResize.edges, resizeCursors)\n          );\n          this.renderer.addClass(\n            currentResize.clonedNode,\n            RESIZE_GHOST_ELEMENT_CLASS\n          );\n          currentResize.clonedNode!.scrollTop = currentResize.startingRect\n            .scrollTop as number;\n          currentResize.clonedNode!.scrollLeft = currentResize.startingRect\n            .scrollLeft as number;\n        }\n        this.zone.run(() => {\n          this.resizeStart.emit({\n            edges: getEdgesDiff({\n              edges,\n              initialRectangle: startingRect,\n              newRectangle: startingRect\n            }),\n            rectangle: getNewBoundingRectangle(startingRect, {}, 0, 0)\n          });\n        });\n      });\n\n    this.mouseup.subscribe(() => {\n      if (currentResize) {\n        this.renderer.removeClass(this.elm.nativeElement, RESIZE_ACTIVE_CLASS);\n        this.renderer.setStyle(document.body, 'cursor', '');\n        this.renderer.setStyle(this.elm.nativeElement, 'cursor', '');\n        this.zone.run(() => {\n          this.resizeEnd.emit({\n            edges: getEdgesDiff({\n              edges: currentResize!.edges,\n              initialRectangle: currentResize!.startingRect,\n              newRectangle: currentResize!.currentRect\n            }),\n            rectangle: currentResize!.currentRect\n          });\n        });\n        removeGhostElement();\n        currentResize = null;\n      }\n    });\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnDestroy(): void {\n    this.mousedown.complete();\n    this.mouseup.complete();\n    this.mousemove.complete();\n    this.pointerEventListenerSubscriptions.pointerDown.unsubscribe();\n    this.pointerEventListenerSubscriptions.pointerMove.unsubscribe();\n    this.pointerEventListenerSubscriptions.pointerUp.unsubscribe();\n  }\n\n  private setElementClass(elm: ElementRef, name: string, add: boolean): void {\n    if (add) {\n      this.renderer.addClass(elm.nativeElement, name);\n    } else {\n      this.renderer.removeClass(elm.nativeElement, name);\n    }\n  }\n}\n\nclass PointerEventListeners {\n  public pointerDown: Observable<PointerEventCoordinate>;\n\n  public pointerMove: Observable<PointerEventCoordinate>;\n\n  public pointerUp: Observable<PointerEventCoordinate>;\n\n  private static instance: PointerEventListeners; // tslint:disable-line\n\n  public static getInstance(\n    renderer: Renderer2,\n    zone: NgZone\n  ): PointerEventListeners {\n    if (!PointerEventListeners.instance) {\n      PointerEventListeners.instance = new PointerEventListeners(\n        renderer,\n        zone\n      );\n    }\n    return PointerEventListeners.instance;\n  }\n\n  constructor(renderer: Renderer2, zone: NgZone) {\n    this.pointerDown = new Observable(\n      (observer: Observer<PointerEventCoordinate>) => {\n        let unsubscribeMouseDown: () => void;\n        let unsubscribeTouchStart: () => void;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseDown = renderer.listen(\n            'document',\n            'mousedown',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event\n              });\n            }\n          );\n\n          unsubscribeTouchStart = renderer.listen(\n            'document',\n            'touchstart',\n            (event: TouchEvent) => {\n              observer.next({\n                clientX: event.touches[0].clientX,\n                clientY: event.touches[0].clientY,\n                event\n              });\n            }\n          );\n        });\n\n        return () => {\n          unsubscribeMouseDown();\n          unsubscribeTouchStart();\n        };\n      }\n    ).pipe(share());\n\n    this.pointerMove = new Observable(\n      (observer: Observer<PointerEventCoordinate>) => {\n        let unsubscribeMouseMove: () => void;\n        let unsubscribeTouchMove: () => void;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseMove = renderer.listen(\n            'document',\n            'mousemove',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event\n              });\n            }\n          );\n\n          unsubscribeTouchMove = renderer.listen(\n            'document',\n            'touchmove',\n            (event: TouchEvent) => {\n              observer.next({\n                clientX: event.targetTouches[0].clientX,\n                clientY: event.targetTouches[0].clientY,\n                event\n              });\n            }\n          );\n        });\n\n        return () => {\n          unsubscribeMouseMove();\n          unsubscribeTouchMove();\n        };\n      }\n    ).pipe(share());\n\n    this.pointerUp = new Observable(\n      (observer: Observer<PointerEventCoordinate>) => {\n        let unsubscribeMouseUp: () => void;\n        let unsubscribeTouchEnd: () => void;\n        let unsubscribeTouchCancel: () => void;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseUp = renderer.listen(\n            'document',\n            'mouseup',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event\n              });\n            }\n          );\n\n          unsubscribeTouchEnd = renderer.listen(\n            'document',\n            'touchend',\n            (event: TouchEvent) => {\n              observer.next({\n                clientX: event.changedTouches[0].clientX,\n                clientY: event.changedTouches[0].clientY,\n                event\n              });\n            }\n          );\n\n          unsubscribeTouchCancel = renderer.listen(\n            'document',\n            'touchcancel',\n            (event: TouchEvent) => {\n              observer.next({\n                clientX: event.changedTouches[0].clientX,\n                clientY: event.changedTouches[0].clientY,\n                event\n              });\n            }\n          );\n        });\n\n        return () => {\n          unsubscribeMouseUp();\n          unsubscribeTouchEnd();\n          unsubscribeTouchCancel();\n        };\n      }\n    ).pipe(share());\n  }\n}\n"
  ],
  "names": [
    "tslib_1.__read"
  ],
  "mappings": "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"
}
